#!/usr/bin/env bash
# reef-plug — link files/dirs from the twin folder into the base folder.
# Usage: run from either the base project dir or its twin (default suffix "-reef").

set -euo pipefail

# ----- Configuration -----
SUFFIX="-reef"   # default twin suffix

# ----- Colors & symbols (fallback to plain if not a TTY) -----
is_tty=0
if [ -t 1 ]; then is_tty=1; fi

if [ "$is_tty" -eq 1 ]; then
  RED="$(printf '\033[31m')"
  GREEN="$(printf '\033[32m')"
  YELLOW="$(printf '\033[33m')"
  DIM="$(printf '\033[2m')"
  BOLD="$(printf '\033[1m')"
  RESET="$(printf '\033[0m')"
  OK="✓"
  ERR="✗"
  DOT="●"
  ARROW_RX="→"
  ARROW_LX="←"
  CONNECT="━"
  WARN="⚠️"
else
  RED=""; GREEN=""; YELLOW=""; DIM=""; BOLD=""; RESET=""
  OK="[OK]"; ERR="[ERR]"; DOT="*"; ARROW_RX="->"; ARROW_LX="<-"; CONNECT="-"; WARN="[WARN]"
fi

# Support --suffix=foo
for arg in "$@"; do
  case "$arg" in
    --suffix=*)
      SUFFIX="${arg#*=}"
      ;;
  esac
done

# Portable realpath (works on macOS/BSD and Linux). Resolves to absolute path.
_realpath() {
  local path="$1"
  
  # Use system realpath with fallback to manual resolution
  if command -v realpath >/dev/null 2>&1; then
    realpath -m "$path" 2>/dev/null || echo "$path"
  else
    # Make absolute if relative
    if [[ "$path" != /* ]]; then
      path="$PWD/$path"
    fi
    
    # Basic cleanup
    path="${path//\/\///}"  # compress multiple slashes
    path="${path%/}"        # remove trailing slash
    [[ -n "$path" ]] || path="/"
    
    echo "$path"
  fi
}

# Figure out BASE and TWIN with better logic
CWD="$(_realpath "$PWD")"
BASE=""
TWIN=""

# Check if current directory ends with suffix AND a non-suffix version exists
if [[ "$CWD" == *"$SUFFIX" ]]; then
  potential_base="${CWD%$SUFFIX}"
  # Only treat as twin if the base actually exists
  if [[ -d "$potential_base" ]]; then
    TWIN="$CWD"
    BASE="$(_realpath "$potential_base")"
  fi
fi

# If we haven't identified BASE/TWIN yet, assume we're in base
if [[ -z "$BASE" ]]; then
  BASE="$CWD"
  TWIN="${CWD}${SUFFIX}"
fi

# Sanity check: BASE and TWIN shouldn't be the same
if [[ "$BASE" == "$TWIN" ]]; then
  printf "%s%s%s Base and twin directories are identical. Check your suffix configuration.\n" "$RED" "$ERR" "$RESET" >&2
  exit 1
fi

# Base folder must exist
if [[ ! -d "$BASE" ]]; then
  printf "%s%s%s Base folder not found: %s\n" "$RED" "$ERR" "$RESET" "$BASE" >&2
  exit 1
fi

# Twin folder missing → yellow warning, quit gracefully  
if [[ ! -d "$TWIN" ]]; then
  printf "%s%s%s Twin '%s' folder not found: %s\n" "$YELLOW" "$WARN" "$RESET" "$SUFFIX" "$TWIN"
  exit 0
fi

# Check write permissions on base directory
if [[ ! -w "$BASE" ]]; then
  printf "%s%s%s No write permission on base directory: %s\n" "$RED" "$ERR" "$RESET" "$BASE" >&2
  exit 1
fi

printf "Linking from: %s%s%s\n" "$DIM" "$TWIN" "$RESET"
printf "Into base:    %s%s%s\n\n" "$DIM" "$BASE" "$RESET"

# Store original shell options
original_shopt=$(shopt -p dotglob nullglob 2>/dev/null || true)

# Link each top-level item from TWIN into BASE
shopt -s dotglob nullglob
created=0
had_any=0

for src in "$TWIN"/*; do
  had_any=1
  name="$(basename -- "$src")"
  dst="$BASE/$name"

  [[ "$name" == "." || "$name" == ".." ]] && continue

  if [[ -L "$dst" ]]; then
    # Check if it's pointing to our twin (idempotent behavior)
    if [[ "$(readlink "$dst")" == "$src" ]]; then
      printf "%s%s%s %s %s(already linked correctly)%s\n" "$DIM" "$OK" "$RESET" "$name" "$DIM" "$RESET"
    else
      printf "%s%s%s %s %s(linked to different target)%s\n" "$RED" "$ERR" "$RESET" "$name" "$DIM" "$RESET"
    fi
    continue
  elif [[ -e "$dst" ]]; then
    printf "%s%s%s %s %s(exists, not a symlink)%s\n" "$RED" "$ERR" "$RESET" "$name" "$DIM" "$RESET"
    continue
  fi

  if ln -s "$src" "$dst" 2>/dev/null; then
    printf "%s%s%s %s\n" "$GREEN" "$OK" "$RESET" "$name"
    created=$((created+1))
  else
    printf "%s%s%s %s %s(link failed)%s\n" "$RED" "$ERR" "$RESET" "$name" "$DIM" "$RESET"
  fi
done

# Restore original shell options
if [[ -n "$original_shopt" ]]; then
  eval "$original_shopt"
else
  shopt -u dotglob nullglob 2>/dev/null || true
fi

if [[ $had_any -eq 0 ]]; then
  printf "%sNothing to link: %s is empty.%s\n" "$DIM" "$TWIN" "$RESET"
fi

printf "\nCreated %d link(s).\n" "$created"
